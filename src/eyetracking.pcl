##ET##
eye_tracker EyeLink = new eye_tracker( "PresLink" );#this starts the eyetracker , the name of this (currently "PresLink") is whatever your extention is called (sometimes "EyeTracker")
int dummy_mode = 0; #if this is 1 you can run the paradigm without eyetracking
if dummy_mode == 1 then
	EyeLink.set_parameter("tracker_address", "");
end;         
#connect to Eyelink tracker.
EyeLink.start_tracking();
string edfname_final = logfile.subject() + "ET_1"; #names the EDF file, choose here the name of your individual edf file
string edfname_out = "ET_1";

#here we are checking if the edf file already exists and if so it add a +1 to the ending
int cntr = 1;
loop
	bool good_edfname = false; 
until
	good_edfname == true
begin
	if file_exists(logfile_directory + edfname_final + ".edf") then
		cntr = cntr + 1;
		edfname_final = logfile.subject() + "ET_" + string(cntr); # + ".edf";
		edfname_out = "ET_" + string(cntr) 
	else
		good_edfname = true
	end;
end;

if edfname_out.count() > 8 then
	exit("EDF Filename needs to be smaller than 8 characters long (letters, numbers and underscores only)"); #if your EDF filename is longer it might start giving trouble specially if you do more than 9 blocks
end;
#remove the filename extension, because it will be added back later 
#(this allows user to enter EDF name either with or without the extension 
#when running the script
array<string> temp[0];
edfname_out.split(".", temp);
edfname_out = temp[1];
#Tell the Host PC to open the EDF file
EyeLink.set_parameter("open_edf_file",edfname_out+".edf");

# STEP 1c SET DISPLAY PARAMETERS
#create variables to store the monitor's width and height in pixels
int display_height = display_device.height();
int display_width  = display_device.width();

#this sends a command to set the screen_pixel_coords parameter on the Host PC, 
#which formats the eye position data to match that of the screen resolution
EyeLink.send_command("screen_pixel_coords 0 0 " + string(display_width-1) + 
	" " + string(display_height-1));
	
#this sends a message to the EDF tells Data Viewer the resolution of the experiment 
#so that it can format its Trial View window appropriately
EyeLink.send_message("DISPLAY_COORDS " + "0 0 " + string(display_width-1) + 
	" " + string(display_height-1)); 


#####  STEP 2: a) GET TRACKER VERSION; b)SELECT AVAILABLE SAMPLE/EVENT DATA
string Eyelink_ver = EyeLink.get_parameter("tracker_version"); # get et version

#tracker_ver will be something like EYELINK CL 4.48, but we want to get the 4.48
array <string> string_array[5];
Eyelink_ver.split(" ",string_array);
double el_v = double(string_array[3]); #Host PC software version will be el_v

term.print_line(el_v);

### Step 2b SELECT AVAILABLE SAMPLE/EVENT DATA
#Select which events are saved in the EDF file. Include everything just in case
EyeLink.send_command("file_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT");	#this ensures that Gaze data is recorded 
EyeLink.send_command("link_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,BUTTON,INPUT");

#First, check tracker version so as to determine whether to include 'HTARGET' 
#to save head target sticker data for supported eye trackers
#Then, send commands to set the file_sample_data and link_sample_data parameters, 
#which specify which aspects of sample data will be recorded to the EDF file 
#and which will be available over the Ethernet link between the Host PC and Display PC
if (el_v >=4.0) then
	#include HTARGET (head target) data if tracker is EyeLink 1000 or later
	EyeLink.send_command("file_sample_data = LEFT,RIGHT,GAZE,AREA,GAZERES,STATUS,HTARGET,INPUT"); #Area token ensures Pupil size is recorded.
	EyeLink.send_command("link_sample_data = LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,HTARGET,INPUT");
else
	EyeLink.send_command("file_sample_data = LEFT,RIGHT,GAZE,AREA,GAZERES,STATUS,INPUT");
	EyeLink.send_command("link_sample_data = LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,INPUT"); 
end;


#####  STEP 3:CALIBRATE EYE TRACKER

#start calibration with camera support. If calibration_type is set to 
#et_calibrate_default and if the parameter 1 value is set to 1.0, 
#then the user defined target with the name et_calibration will be ignored 
EyeLink.calibrate( et_calibrate_default, 1.0, 0.0, 0.0 );

##### CLEANUP SUBROUTINE -- CALLED WHEN THE SCRIPT ENDS #######################################

#this subroutine is called at the end of the script or if the Esc key is pressed during 
#the trial image presentation
#it closes the EDF file, and transfers it over to the logfile directory of the experiment on the Display PC
sub cleanup begin
	EyeLink.send_command("set_idle_mode"); #eyelink goes in idle mode
	EyeLink.send_command("clear_screen 0");#clear Host PC screen at end of session
	wait_interval(500); 
	EyeLink.send_command("close_data_file");#close the EDF file and then allow 100 msec to ensure it's closed
	if dummy_mode != 1 then
		EyeLink.set_parameter("get_edf_file",logfile_directory + edfname_final + ".edf");#transfer the EDF file to the logfile directory of the experiment	on the Display PC
	end;
	EyeLink.stop_tracking();
end;	
#Set the the tracker to idle mode.  
#It's important to do this before using commands to transfer graphics to / do drawing on the Host PC
EyeLink.send_command("set_idle_mode");
wait_interval(50);#in ms
# >>>>>>>>>>>optional<<<<<<<<<<<< To put a picture in the center of the screen, you need the a new version of the EyeLink Developers Kit. Wihtout this you can load a full screen picture or the picture will always only be in the top left corner.
# you can draw on the host pc to see where people are looking
EyeLink.send_command("clear_screen 0") #clearing screen
# you can use one of the 2 following options. 
#The first one allows you to load a picture to the screen (stimulus) and see if people are looking there)
EyeLink.set_parameter("transfer_image", [imagePath, xs, ys, width, height, xd, yd]); #xs, ys: top-left corner - width, height: size (value of 0 means everything) - xd, yd,: location (top-left)  where it will be presented on the host pc
#tracker.set_parameter("transfer_image", [images[i].filename(), ",0,0,0,0," + string(display_width/2 - images[i].width()/2) + "," + string (display_height/2 - images[i].height()/2)); # example
#the second one draws a figure (box) on the screen of 100 x 100 pixels
EyeLink.send_command("draw_box" + string(display_width/2-50) + " " + string (display_ height/2-50 + " " + string(display_width/2+50)+ " " + string(display_height/2+50) + "4"); 

##ET##
#here there would be paradigm specific code, that maybe sets-up trials or other important stuff presenation will do, but it won't present anything yet.

#the folowing code needs to be added just before you present your first trial. 
#This only should be ran 1x by presentation per EDF file, so it shouldn't be in the loop of the each trial, but should be at the start of each block. 

##ET##
	EyeLink.set_recording(true);
	wait_interval(100); #in ms
##ET##

# the following code will be paradigm dependend so you will need to make a choice where and how often to add this. 
# It should be in the loop where you present your trials, so that it can add info for each trail.
# this practice code comes from a visual paradigm with 42 trails, it will us the counter i (which defines the trial number) to change the recording message seen on the eyetracker
# this is also added to the eyelink file and will make it possible for you to afterwards see when a new trail started using the EDF file. You will need this to be able to tell which trial happened. 
EyeLink.send_command("record_status_message 'visual trial " + string(i) + "/42 start'"); #in this case i = the int that counts the trials, you should both change the 'visual trial and the "/start'" 
#this is more modifiable code that will allow you to add more info to your trials. 
EyeLink.send_string( "TRIALID " + string(i));#in this case i = the int that counts the trials,
# Or you can just tell the EDF file to timelock the start of the trial, or you can add variables that you created in the PCL and input in the EDF file what type of trial it is etc.
EyeLink.send_message("stimulus_onset"); # put this in the line before you present your stimulus in the PCL file

#if you are sending more than 5 messages you need to ad a 1ms wait between the next. 
wait_interval(1)

#doing drift correctiong/ drift check is important, but you need to figure out how often you can do this, as it requiers your paradigm to stop, people will look at the cross and resume the paradigm
EyeLink.calibrate( et_calibrate_drift_correct, 7.0, 0.0, 0.0 );
# this should be added add the end of your trial so you can see in the EDF file where the trial stopped
	EyeLink.send_command("record_status_message 'EndTrial'");
	EyeLink.send_message("TRIAL_RESULT 0");# this is the proper way to end the trial, not sure if it is read different for the EDF file or if you can change this to a different message like "end trail"
	
#this last bit of code will save your eyelink file
end_block_trial.present();
cleanup();#gets the eyetracker to save all the files this is setup in the eyetracking part of this code